<?php
  class STC_Fundreporting extends CI_Model {
    function __construct(){
      parent::__construct();
    }

    public function count($company){
      $sql = "SELECT COUNT(*) as cnt FROM fund_list where company = '{$company}'";

      $row = $this->db->query($sql);

      $result = $row->row_array();

      return $result['cnt'];
    }



    public function bankbook($company){
     return $this->db->query("select a.* from (select a.idx, a.type, a.bank, a.banktype, a.account, a.breakdown,
      b.yesbalance, b.todaydeposit, b.todaywithdraw, b.balance from fund_bankbook a
      left join (select a.banktype, ifnull(a.balance,0)-ifnull(b.todaydeposit,0)+ifnull(b.todaywithdraw,0) as yesbalance,
      ifnull(b.todaydeposit,0) as todaydeposit, ifnull(b.todaywithdraw,0) as todaywithdraw,
      a.balance from (select banktype, IFNULL(SUM(deposit),0) - IFNULL(SUM(withdraw),0) as balance
      from fund_list where banktype is not null and company = '{$company}' group BY banktype) a
      left join (SELECT banktype, IFNULL(SUM(deposit),0) AS todayDeposit, IFNULL(SUM(withdraw),0) AS todayWithdraw
      from fund_list WHERE company = '{$company}' and banktype is NOT NULL and duedate = CURDATE() GROUP BY banktype) b
      ON a.banktype = b.banktype) b on a.banktype = b.banktype where type='보통예금' and company ='{$company}' order by idx) a union select idx, type, bank, banktype, account, breakdown, null as yesbalance, null as todaydeposit, null as todaywithdraw, balance from fund_bankbook where type!= '보통예금' and company = '{$company}';")->result();
    }

    public function bankbookupdate($company){

      $result = $this->db->query("update fund_bankbook a, ( select a.banktype, ifnull(b.balance,0) as balance from fund_bankbook a left join (select banktype, ifnull(sum(deposit),0) - ifnull(sum(withdraw),0) as balance from fund_list group by banktype) b on a.banktype = b.banktype where company = '{$company}' ) b SET a.balance = b.balance WHERE a.banktype = b.banktype;");
      if($result){
        return "true";
      }else{
        return "false";
      }
    }

    public function accountlist($start, $limit, $company){

      $limit_query=' LIMIT '. $start .', '. $limit ;
      return $this->db->query("SELECT * FROM fund_list where company = '{$company}' ORDER BY idx DESC". $limit_query)->result();
      // return $this->db->query("SELECT * FROM test WHERE idx = 1 OR month(dueDate) = month(curDate()) ORDER BY idx")->result();
    }

    public function pagingbalance($start,$company){
      $limit = $start;
      // echo "<script>alert('{$start}')</script>";
      return $this->db->query("select ifnull(sum(a.deposit),0)-ifnull(sum(a.withdraw),0) as pagingBalance from (select * from fund_list where company = '{$company}' order by idx limit {$limit}) a;")->result();
    }

    public function sortpagingbalance($limit,$company){
      // echo "<script>alert('{$start}')</script>";
      return $this->db->query("select ifnull(sum(a.deposit),0)-ifnull(sum(a.withdraw),0) as pagingBalance from (SELECT * FROM fund_list where company = '{$company}' ORDER BY FIELD (idx, 1) DESC, dueDate is null ASC, dueDate ASC, idx ASC limit {$limit}) a;")->result();
    }

    public function enduserpagingbalance($start,$company){
      $limit = $start;
      // echo "<script>alert('{$start}')</script>";
      return $this->db->query("select ifnull(sum(a.deposit),0)-ifnull(sum(a.withdraw),0) as pagingBalance from  (SELECT * FROM fund_list where company = '{$company}' ORDER BY FIELD (idx, 1) DESC, endUser is null ASC, endUser ASC, dueDate is null ASC, dueDate ASC limit {$limit}) a;")->result();
    }

    public function sort($start, $limit, $company){
    $limit_query=' LIMIT '. $start .', '. $limit ;
    // return $this->db->query("SELECT * FROM fund_list where company = '{$company}' ORDER BY  dueDate is null ASC, dueDate ASC, idx ASC". $limit_query)->result();
    return $this->db->query("SELECT * FROM fund_list where company = '{$company}' ORDER BY dueDate is null ASC, dueDate DESC, idx DESC". $limit_query)->result();
  }


  public function enduser($start, $limit, $company){
   $limit_query=' LIMIT '. $start .', '. $limit ;
   return $this->db->query("SELECT * FROM fund_list where company = '{$company}' ORDER BY endUser is null ASC, endUser ASC, dueDate is null ASC, dueDate DESC". $limit_query)->result();
 }

    public function bond($company){
      return $this->db->query("SELECT IFNULL(SUM(deposit),0) as bond from fund_list where type = '매출채권' and company = '{$company}' and banktype is null;")->result();
    }

    public function debt($company){
      return $this->db->query("SELECT IFNULL(SUM(withdraw),0) as debt from fund_list where type = '매입채무' and company = '{$company}' and banktype is null;")->result();
    }

    public function delete($data){
        $result = $this->db->delete('fund_list', $data);
        //echo $result;
        if($result){
          return $result;
        }else{
          return "false";
        }
      }

    public function update($data, $idx){
      // $this->db->where('idx', 1);
      // $this->db->update('accountlist2', $data);
      $where = "idx = '{$idx}'";
      $result=$this->db->update('fund_list',$data,$where);
      //echo $result;
      if($result){
        return "true";
      }else{
        return "false";
      }
    }
    // 쿠키 필요
    public function insert($data){
      $result = $this->db->insert('fund_list',$data);
      if($result){
        return "true";
      }else{
        return "false";
      }
    }

    public function insertbankbook($data){
      $result = $this->db->insert('fund_bankbook',$data);
      if($result){
        return $result;
      }else{
        return "false";
      }
    }

    public function updatebankbook($data,$updateIdx){
      $where = "idx = '{$updateIdx}'";
      $result = $this->db->update('fund_bankbook',$data,$where);
      //echo $result;
      if($result){
        return $result;
      }else{
        return "false";
      }
    }

    public function deletebankbook($data){
        $result = $this->db->delete('fund_bankbook', $data);
        //echo $result;
        if($result){
          return $result;
        }else{
          return "false";
        }
      }

    public function selectbankbook($company){
      // return $this->db->query("SELECT * FROM fund_bankbook WHERE type='보통예금' and company = '{$company}' ORDER BY idx ASC")->result();
      return $this->db->query("SELECT * FROM fund_bankbook WHERE company = '{$company}' ORDER BY idx ASC")->result();
    }

    // public function selectBalance(){
    //   return $this->db->query("SELECT balance FROM fund_bankbook ORDER BY idx ASC")->result();
    // }

    public function selectloanaccount($company){
      return $this->db->query("SELECT * FROM fund_bankbook WHERE type='대출' and company = '{$company}' ORDER BY idx ASC")->result();
    }

    public function seachlist($selectDate, $fromDate = null, $toDate = null, $search1, $keyword1 = null, $search2, $keyword2 = null, $company){
  if($fromDate==null && $toDate){
    $this->db->select_min($selectDate, 'MinDate');
    $query = $this->db->get('fund_list');
    $row = $query->row();

    $fromDate = $row->MinDate;
  }

  if($toDate==null && $fromDate){
    $this->db->select_max($selectDate, 'MaxDate');
    $query = $this->db->get('fund_list');
    $row = $query->row();

    $toDate = $row->MaxDate;
  }

      $result['fromDate'] = $fromDate;
      $result['toDate'] = $toDate;

      $term = '';
      if($fromDate && $toDate){
        $term = " AND $selectDate BETWEEN '".$fromDate. "' AND '".$toDate."'";
      }

    $key1 = '';
    if($keyword1){
      $key1 = " AND $search1 LIKE '%".$keyword1."%'";
    }

    $key2 ='';
    if($keyword2){
      $key2 = " AND $search2 LIKE '%".$keyword2."%'";
    }

    $comkey = " AND company = '$company'";



    $sql = "SELECT * FROM fund_list WHERE 1=1 ".$term.$key1.$key2.$comkey;

    // echo $sql;
    $query = $this->db->query($sql);
    $result['num_rows'] = $query->num_rows();

    $sql2 = "SELECT IFNULL(sum(deposit),0) as sumDeposit, IFNULL(sum(withdraw),0) as sumWithdraw FROM fund_list WHERE 1=1 ".$term.$key1.$key2.$comkey." AND bankType IS NOT NULL";
    $query2 = $this->db->query($sql2);
    $row = $query2->row();
    $result['sumDeposit'] = $row->sumDeposit;
    $result['sumWithdraw']= $row->sumWithdraw;
    // echo $resultRow;
    // $result['list'] = $query->result();
    // $result['row'] = $query->num_rows();
    $sql3 = "SELECT IFNULL(sum(deposit),0) as nsDeposit, IFNULL(sum(withdraw),0) as nsWithdraw FROM fund_list WHERE 1=1 ".$term.$key1.$key2.$comkey." AND bankType IS NULL";
    $query3 = $this->db->query($sql3);
    $row = $query3->row();
    $result['nsDeposit'] = $row->nsDeposit;
    $result['nsWithdraw'] = $row->nsWithdraw;
    return $result;
  }

  public function searchpaging($selectDate, $fromDate = null, $toDate = null, $search1, $keyword1 = null, $search2, $keyword2 = null, $start, $limit, $company){
    if($fromDate==null && $toDate){
      $this->db->select_min($selectDate, 'MinDate');
      $query = $this->db->get('fund_list');
      $row = $query->row();

      $fromDate = $row->MinDate;
    }

    if($toDate==null && $fromDate){
      $this->db->select_max($selectDate, 'MaxDate');
      $query = $this->db->get('fund_list');
      $row = $query->row();

      $toDate = $row->MaxDate;
    }

    $term = '';
    if($fromDate && $toDate){
      $term = " AND $selectDate BETWEEN '".$fromDate. "' AND '".$toDate."'";
    }

    $key1 = '';
    if($keyword1){
      $key1 = " AND $search1 LIKE '%".$keyword1."%'";
    }

    $key2 ='';
    if($keyword2){
      $key2 = " AND $search2 LIKE '%".$keyword2."%'";
    }

    $comkey = " AND company = '$company'";

    // $limitQuery ='';
    // if($start !='' && $limit !=''){
      $limitQuery=' LIMIT '. $start .', '. $limit ;
    // }
    //echo "---".$limitQuery."---";
    $sort = " order by idx desc";

    $sql = "SELECT * FROM fund_list WHERE 1=1 ".$term.$key1.$key2.$comkey.$sort.$limitQuery;

    $query = $this->db->query($sql);

    // $resultRow = $query->num_rows();
    // echo $resultRow;
    $result = $query->result();
    // $result['row'] = $query->num_rows();

    return $result;
  }

      public function selectbanktypelist($company){
        return $this->db->query("SELECT distinct banktype from fund_bankbook where company = '{$company}' and type = '보통예금' and banktype is not null;")->result();
      }

    }
 ?>
